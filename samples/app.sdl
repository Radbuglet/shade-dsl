pub const builtins = mod {
    const get_builtin_type = intrinsic("core.get_builtin_type");

    pub const bool = get_builtin_type("bool");
    pub const u32 = get_builtin_type("u32");
    pub const metatype = get_builtin_type("type");
    pub const any = get_builtin_type("any");

    pub const special = mod {
        pub const get_builtin_type = builtins.get_builtin_type;
    };
};

pub const Vec = fn<T: builtins.metatype> -> builtins.metatype {
    struct {
        pub const Elem = T;

        cap: builtins.u32;
        len: builtins.u32;

        // pub const push = fn(self: *mut Self, item: Elem) {

        // };
    }
};

const demo = {
    let mut foo = builtins.u32;
    foo = const { builtins.special.get_builtin_type("u32") };

    let funny = const {
        fn(v: builtins.u32) {}
    };

    // let funky = fn<foo: builtins.any> -> builtins.any {
    //     fn(v: foo) {}
    // }
    // .<<foo>>;

    foo
};

const whee = fn<T: builtins.metatype>(v: T) -> Vec.<T>.Elem {
    v
};

const woo = whee.<builtins.bool>(true);
