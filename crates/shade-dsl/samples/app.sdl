const std = mod {
    const ops = mod {
        const index = sym("indexing operator");
    };
};

const MyEnum = enum {
    const Super = type(Self);

    whee: (u32, i32);
    woo: struct {
        waz: *const Super;
        kaz: f32;
    };
};

const Vec = fn<T: type> -> type {
    struct {
        base: *mut T;
        len: usize;
        cap: usize;

        const new = fn() -> Self {
            todo()
        };

        const len = fn(self: *const Self) -> usize {
            self.len
        };

        const capacity = fn(self: *const Self) -> usize {
            self.cap
        };

        const push = fn(self: *mut Self, value: T) {
            todo()
        };

        const [std.ops.index] = mod {
            const Index = type(usize);
            const Output = type(u32);

            const deref = fn(self: *mut Self) -> *mut Output {
                todo()
            };
        };
    }
};
